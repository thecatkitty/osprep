#!/bin/bash -l

# Author      : Mateusz Karcz
# Last edited : May 2018
# Version     : 0.1.1805
#
# Description : A tool for downloading and configuring boot disks of hipster
#               operating systems.
#
# Licensed under the MIT License.

############################### GLOBAL VARIABLES ###############################
PROGRAM_NAME="Celones Operating System Preparation Utility"
PROGRAM_VERSION="0.1.1805"

HTTP_USER_AGENT="Celones-OSPrep/$PROGRAM_VERSION"

NC="\033[0m"
BOLD="\033[1m"
GREEN="\033[0;32m"

DIALOG_OK=0
DIALOG_CANCEL=1
DIALOG_HELP=2
DIALOG_EXTRA=3
DIALOG_ITEM_HELP=4
DIALOG_ESC=255

OPT_FORMAT="text"
OPT_LOCAL=false
REPO_URL="http://charlotte.celones.pl/osprep/"
REPO_LOCAL="$HOME/.osprep/"

############################### HELPER ROUTINES ################################
############## Software requirements checking ##############
function check_wget {
  if [ -z `command -v wget` ]; then
    echo "This command requires wget, but it hasn't been found!" >&2
    exit 1
  fi
}

function check_make {
  if [ -z `command -v make` ]; then
    echo "This command requires GNU Make, but it hasn't been found!" >&2
    exit 1
  fi
}

function check_dialog {
  if [ -z `command -v dialog` ]; then
    echo "This command requires dialog utility, but it hasn't been found!" >&2
    exit 1
  fi
}

##################### Wrappers for Wget ####################
function http_header {
  # $URL - remote resource
  # $1   - name of the HTTP header
  wget -S --spider -U "$HTTP_USER_AGENT" "$URL" 2>&1 | grep "$1: " | sed -e 's/^ *[^:]\+: //'
}

function http_download {
  # $URL  - remote resource
  # $FILE - output file name
  mkdir -p `dirname "$FILE"`
  wget --no-verbose --show-progress --progress=bar -U "$HTTP_USER_AGENT" -O "$FILE" "$URL"
  if [ $? -ne 0 ]; then rm -f "$FILE"; fi
  if [ ! -s "$FILE" ]; then rm -f "$FILE"; fi
}

function download_gauge {
  # $URL   - remote resource
  # $FILE  - output file name
  # $TITLE - dialog title
  mkdir -p `dirname "$FILE"`
  wget --progress=dot -U "$HTTP_USER_AGENT" -O "$FILE" "$URL" 2>&1 \
  | grep "%" | sed -u -e 's/^ *[^ ]\+[\. ]\+//g' | sed -u -e 's/%.*//' \
  | dialog \
  --backtitle "$PROGRAM_NAME" \
  --title "$TITLE" \
  --gauge "Downloading $URL..." 10 60
  if [ $? -ne 0 ]; then rm -f "$FILE"; fi
  if [ ! -s "$FILE" ]; then rm -f "$FILE"; fi
}

function update_needed {
  # $FILE - candidate for update
  if [ ! -f "$FILE" ]; then
    true
  else
    HTTP_LAST_MODIFIED=`http_header "Last-Modified"`
    if [ $(date -d "$HTTP_LAST_MODIFIED" +%s) -gt $(stat -c %Y "$FILE") ]; then
      true
    else
      false
    fi
  fi
}

############## Package name<->path converters ##############
function rdn_to_path {
  IFS='~' read -r -a SPLIT <<< "$1"
  if [ -n "${SPLIT[1]}" ]; then
    sed -e 's/\./\//g' <<< "${SPLIT[0]}" | sed -e "s/$/~${SPLIT[1]}/"
  else
    sed -e 's/\./\//g' <<< "$1"
  fi
}

function mk_to_rdn {
  echo -n $1 | sed -e 's/\.osprep\/settings\///g' | sed -e 's/\.mk$//g' | sed -e 's/\//./g'
}

function trim {
  # $1 - string for the whitespace removal
  echo -n "$1" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//'
}

################ Settings format converters ################
function mk_to_csv {
  # $FILE - package settings .mk file
  while read LINE; do
    RDN=`mk_to_rdn "$FILE" | sed -e 's/\s//g'`
    if [ `echo "$LINE" | sed -e 's/\s//g'` ]; then
      IFS='#' read -r -a SPLIT <<< "$LINE"
      STATEMENT=`trim "${SPLIT[0]}"`
      COMMENT="${SPLIT[1]}"
      if [ "$STATEMENT" ]; then
        IFS='=' read -r -a SPLIT <<< "$STATEMENT"

        KEY=`trim "${SPLIT[0]}"`
        VALUE=`trim "${SPLIT[1]}"`

        echo -n "${RDN}::${KEY};${VALUE}"

        if [ "`echo $COMMENT | grep -P '^%[^\s][[:space:]]'`" ]; then

          IFS='	' read -r -a PARAMETERS <<< "${COMMENT:3}"

          CAPTION="`trim "${PARAMETERS[0]}"`"
          if [ "$CAPTION" ]; then

            echo -n ";$CAPTION"

            TYPECHAR=`echo $COMMENT | grep -o '^%.' | grep -o '.$'`
            if [ $TYPECHAR == 'T' ]; then echo -n ';text'
            elif [ $TYPECHAR == 'C' ]; then echo -n ';check'

            elif [ $TYPECHAR == 'O' ]; then
              echo -n ';option;'
              read -r -a OPTIONS <<< "${PARAMETERS[1]}"

              i=0
              while [ "${OPTIONS[$i]}" ]; do
                if [ $i -gt 0 ]; then echo -n ','; fi
                echo -n ${OPTIONS[$i]}
                let i++
              done
            fi

          else
            echo -n ";$KEY;text"
          fi

        else
          echo -n ";$KEY;text"
        fi
        echo ''
      fi
    fi
  done < "$FILE"
}

function record_to_mk {
  # $RECORD - settings record
  echo -n `echo ${RECORD[0]} | sed -e 's/.*:://'`
  echo -n ' = '
  echo -n "${RECORD[1]}  "
  echo -n '#%'
  if [ ${RECORD[3]} == 'text' ]; then echo -n 'T'
  elif [ ${RECORD[3]} == 'check' ]; then echo -n 'C'
  elif [ ${RECORD[3]} == 'option' ]; then echo -n 'O'
  else
    echo "Unknown setting value type \`${RECORD[3]}\`!" >&2
    exit 1
  fi
  echo -n "	${RECORD[2]}"

  if [ ${RECORD[3]} == 'option' ]; then
    echo -en '	'
    echo -n "${RECORD[4]}" | sed -e 's/,/ /g'
  fi
  echo ''
}

function csv_to_menu {
  # stdin    - package list in CSV format
  # $TITLE   - dialog title
  # $CAPTION - dialog caption
  # $1       - opt. 'checklist'

  TMPFIL=`mktemp`

  cat \
<< EOF > $TMPFIL
#!/bin/bash

LASTITEM=1
while true; do

exec 4>&1
SELECTION=\`dialog \\
  --backtitle "$PROGRAM_NAME" \\
  --title "$TITLE" \\
  --clear \\
  --item-help \\
  --default-item \$LASTITEM \\
EOF

  if [ "$1" != 'checklist' ]; then
    echo "  --menu \"$CAPTION\" 0 0 10 \\" >> $TMPFIL
  else
    echo "  --checklist \"$CAPTION\" 0 0 10 \\" >> $TMPFIL
  fi

  KEYS='""'
  DETAILS='""'
  i=0
  while read LINE; do
    if [ "$LINE" ]; then
      let i++
      IFS=';' read -r -a RECORD <<< "$LINE"
      KEYS="${KEYS} \"${RECORD[0]}\""
      echo -n "  $i \"${RECORD[1]}\" " >> "$TMPFIL"
      if [ "$1" == 'checklist' ]; then
        if [ "${RECORD[3]}" == '1' ]; then echo -n "on " >> "$TMPFIL"
        else echo -n "off "; fi >> "$TMPFIL"
      fi
      echo "\"${RECORD[2]}\" \\" >> "$TMPFIL"
      DETAILS="${DETAILS} \"${RECORD[2]}\""
    fi
  done
  echo '  2>&1 1>&4`' >> "$TMPFIL"

  cat \
<< 'EOF' >> $TMPFIL
RVAL=$?
exec 4>&-
EOF
  
  echo "KEYS=($KEYS)" >> "$TMPFIL"
  echo "DETAILS=($DETAILS)" >> "$TMPFIL"

  cat \
<< EOF >> $TMPFIL
if [ \$RVAL -eq $DIALOG_OK ]; then
  read -r -a SELECTIONS <<< "\$SELECTION"
  for i in \${SELECTIONS[@]}; do
    echo -n "\${KEYS[\$i]} " >&2
  done
  exit $DIALOG_OK
else
  exit \$RVAL
fi

done

EOF

  chmod +x "$TMPFIL"
  "$TMPFIL"
  cp "$TMPFIL" "$HOME/osprep_tmp.sh"

  rm "$TMPFIL"
}

function enum_to_radiolist {
  # $1       - enumeration
  # $TITLE   - dialog title
  # $CAPTION - dialog caption
  # $DEFAULT - default value

  IFS=',' read -r -a ITEMS <<< "$1"

  TMPFIL=`mktemp`

  cat \
<< EOF > $TMPFIL
#!/bin/bash

LASTITEM=1
while true; do

exec 4>&1
SELECTION=\`dialog \\
  --backtitle "$PROGRAM_NAME" \\
  --title "$TITLE" \\
  --clear \\
  --radiolist "$CAPTION" 0 0 10 \\
EOF

  for i in "${ITEMS[@]}"; do
    echo -n "  $i \"\" " >> $TMPFIL
    if [ "$i" == "$DEFAULT" ]; then echo "on \\" >> $TMPFIL
    else echo "off \\" >> $TMPFIL; fi
  done
  echo '  2>&1 1>&4`' >> "$TMPFIL"

  cat \
<< 'EOF' >> $TMPFIL
RVAL=$?
exec 4>&-
EOF
  
  echo "KEYS=($KEYS)" >> "$TMPFIL"
  echo "DETAILS=($DETAILS)" >> "$TMPFIL"

  cat \
<< EOF >> $TMPFIL
if [ \$RVAL -eq $DIALOG_OK ]; then
  echo -n \$SELECTION >&2
  exit $DIALOG_OK
else
  exit \$RVAL
fi

done

EOF

  chmod +x "$TMPFIL"
  "$TMPFIL"
  cp "$TMPFIL" "$HOME/osprep_tmp.sh"

  rm "$TMPFIL"
}

####################### Package logic ######################
function find_package {
  # $FILE - CSV or list file
  # $1    - package to be found
  # $2    - list format

  FOUND=''

  if [ "$2" == 'list' ]; then

    while read LINE; do

      if [ "$LINE" == "$1" ]; then

        FOUND="$LINE"
        return

      fi
      
    done < "$FILE"
  
  else

    IFS='~' read -r -a PACK_NAME <<< "$1"
    if [ "${PACK_NAME[1]}" ]; then

      while read LINE; do

        IFS=';' read -r -a RECORD <<< "$LINE"
        if [ "${RECORD[0]}" == "${PACK_NAME[0]}" \
          -a "${RECORD[1]}" == "${PACK_NAME[1]}" ]; then

          FOUND="${RECORD[0]}~${RECORD[1]}"
          return

        fi
        
      done < "$FILE"

      return

    else

      while read LINE; do
        IFS=';' read -r -a RECORD <<< "$LINE"
        if [ "${RECORD[0]}" == "$1" ]; then
          FOUND="${RECORD[0]}~${RECORD[1]}"
        fi
      done < "$FILE"

      return

    fi

  fi
}

function mark_common_packages {
  FILE='.osprep/packages'
  touch $FILE
  OPT_FORMAT=csv packages | while read PACK; do


    IFS=';' read -r -a RECORD <<< "$PACK"
    find_package "${RECORD[0]}~${RECORD[1]}" 'list'

    if [ $FOUND ]; then echo "${PACK};1"
    else echo "${PACK};0"; fi
  done
}

function download_package {
  # $FILE - output file path
  # $URL  - remote repository path
  if [ "$IOPT_DIALOG" == false ]; then echo -n "$CAPTION"; fi

  if [ -f "$FILE" ]; then
    HTTP_LAST_MODIFIED=`http_header "Last-Modified"`
    if [ $(date -d "$HTTP_LAST_MODIFIED" +%s) -gt $(stat -c %Y "$FILE") ]; then
      rm "$FILE"
    else
      echo "Package up to date, skipping."
    fi
  fi

  if [ ! -f "$FILE" ]; then
    echo "Downloading the package."
    if [ "$IOPT_DIALOG" != false ]; then
      TITLE="$CAPTION" download_gauge
    else
      http_download
    fi

    if [ -f "$FILE" ]; then
      if [ "$IOPT_DIALOG" == false ]; then echo "Package download completed."; fi
    
    elif [ "$IOPT_DIALOG" == false ]; then
      echo "Couldn't download package!" >&2
      exit 1
    else
      simple_msgbox "Download error" "Couldn't download \`$FILE\`!"
      exit 1
    fi
  fi
}

function extract_package {
  # $FILE       - package file path
  # $TARGET_DIR - extraction output directory
  mkdir -p "$TARGET_DIR"
  tar -xJf "$FILE" -C "$TARGET_DIR" --verbose
}

function prepare_apply {
  # $MAKEDIR - Makefiles directory
  # $TARGET  - target directory
  # $1       - package ID
  GENERAL_PATH=`rdn_to_path "$1"`
  MAKEFILE_PATH="${MAKEDIR}/${GENERAL_PATH}"
  BASE_GENERAL_PATH=`rdn_to_path $BASE`
  BASE=`base`

  mkdir -p "$MAKEFILE_PATH"

  echo "HTTPDOWNLOAD = wget --no-verbose --show-progress --progress=bar -U \"$HTTP_USER_AGENT\" -O" > "${MAKEFILE_PATH}/Makefile"
  echo "OUT = `realpath "$TARGET"`" >> "${MAKEFILE_PATH}/Makefile"
  echo "REPO = ${REPO_LOCAL}" >> "${MAKEFILE_PATH}/Makefile"
  echo "MOUNT = `realpath .osprep/mount`" >> "${MAKEFILE_PATH}/Makefile"
  echo "BASE_SETTINGS = `realpath .osprep/settings/$BASE_GENERAL_PATH.mk`" >> "${MAKEFILE_PATH}/Makefile"
  echo '' >> "${MAKEFILE_PATH}/Makefile"
  
  cat ".osprep/settings/${GENERAL_PATH}.mk" >> "${MAKEFILE_PATH}/Makefile"
  echo '' >> "${MAKEFILE_PATH}/Makefile"
  cat "${REPO_LOCAL}${GENERAL_PATH}/apply.mk" >> "${MAKEFILE_PATH}/Makefile"
  echo '' >> "${MAKEFILE_PATH}/Makefile"
}

#################### Output beautifiers ####################
function print_package_list {
  # $FILE - input CSV file
  if [ $OPT_FORMAT == "csv" ]; then cat "$FILE"

  else
    while read LINE; do
      IFS=';' read -r -a RECORD <<< "$LINE"
      echo -e "${GREEN}${RECORD[0]}${NC} ${RECORD[1]}"
      echo -e "  ${BOLD}${RECORD[2]}:${NC} ${RECORD[3]}"
      echo ''
    done < "$FILE"
  fi
}

function beautify_settings {
  # stdin - CSV
  while read LINE; do
    IFS=';' read -r -a RECORD <<< "$LINE"
    echo -n "${RECORD[0]} ["
    if [ "${RECORD[3]}" == 'text' ]; then echo -n TEXT
    elif [ "${RECORD[3]}" == 'check' ]; then echo -n BOOL
    elif [ "${RECORD[3]}" == 'option' ]; then
      if [ "${RECORD[4]}" ]; then echo -n "ENUM(${RECORD[4]})"
      else echo -n "TEXT"; fi
    fi
    echo "] - ${RECORD[2]}"
    if [ "${RECORD[1]}" ]; then echo "  ${RECORD[1]}"
    else echo "<none>"; fi
    echo ''
  done
}

function simple_msgbox {
  # $1 - title
  # $2 - text
  dialog \
    --backtitle "$PROGRAM_NAME" \
    --title "$1" \
    --clear \
    --msgbox "$2" 10 60
}

function dumb_selector {
  # $TITLE - dialog title
  # $CAPTION - dialog caption
  TMPFIL=`mktemp`

  cat \
<< EOF > $TMPFIL
#!/bin/bash

while true; do

exec 4>&1
SELECTION=\`dialog \\
  --backtitle "$PROGRAM_NAME" \\
  --title "Select package" \\
  --clear \\
  --menu "$CAPTION" 0 0 10 \\
EOF

  KEYS='""'
  i=0
  while read LINE; do
    if [ "$LINE" ]; then
      let i++
      KEYS="${KEYS} \"${LINE}\""
      echo "  $i \"${LINE}\" \\" >> "$TMPFIL"
    fi
  done
  echo '  2>&1 1>&4`' >> "$TMPFIL"

  cat \
<< 'EOF' >> $TMPFIL
RVAL=$?
exec 4>&-
EOF
  
  echo "KEYS=($KEYS)" >> "$TMPFIL"

  cat \
<< EOF >> $TMPFIL
if [ \$RVAL -eq $DIALOG_OK ]; then
  echo -n "\${KEYS[\$SELECTION]} " >&2
  exit $DIALOG_OK
else
  exit \$RVAL
fi

done

EOF

  chmod +x "$TMPFIL"
  "$TMPFIL"
  cp "$TMPFIL" "$HOME/osprep_tmp.sh"

  rm "$TMPFIL"
}

function settings_menu {
  while true; do

    exec 3>&1
    TITLE="Select package"
    CAPTION="Select package to change its settings:"
    PACKAGE=`(cat .osprep/base && echo && cat .osprep/packages) | dumb_selector  2>&1 1>&3`
    exec 3>&-
    if [ -z "$PACKAGE" ]; then break; fi;

    while true; do
      exec 3>&1
      TITLE="Select settings"
      CAPTION="Select name of the value to be changed:"
      KEY=`OPT_FORMAT=csv _set $PACKAGE | cut -d ';' -f 1 | dumb_selector  2>&1 1>&3`
      KEY=`trim "$KEY"`
      exec 3>&-
      if [ -z "$KEY" ]; then break; fi;

      LINE=`OPT_FORMAT=csv _set $PACKAGE | grep "$KEY"`
      IFS=';' read -r -a RECORD <<< "$LINE"

      if [ "${RECORD[3]}" == 'option' ]; then
        if [ -z "${RECORD[4]}" ]; then RECORD[3]='text'; fi
      fi

      if [ "${RECORD[3]}" == 'text' ]; then
        exec 3>&1
        VALUE=`_set $KEY`
        INPUT=`dialog \
          --backtitle "$PROGRAM_NAME" \
          --title "Change setting - $KEY" \
          --inputbox "${RECORD[2]}? New value:" 10 60 "$VALUE" \
          2>&1 1>&3`
        RVAL=$?
        exec 3>&-

        case $RVAL in
          $DIALOG_CANCEL ) continue ;;
          $DIALOG_ESC    ) exit 1   ;;
        esac

        _set $KEY "$INPUT"

      elif [ "${RECORD[3]}" == 'check' ]; then
        exec 3>&1
        VALUE=`_set $KEY`
        if [ "$VALUE" == '0' ]; then VALUE='--defaultno';
        else VALUE=''; fi

        dialog \
          --backtitle "$PROGRAM_NAME" \
          --title "Change setting - $KEY" \
          $VALUE --yesno "${RECORD[2]}?" 8 60 \
          2>&1 1>&3
        RVAL=$?
        exec 3>&-

        case $RVAL in
          $DIALOG_OK     ) _set $KEY 1 ;;
          $DIALOG_CANCEL ) _set $KEY 0 ;;
          $DIALOG_ESC    ) exit 1      ;;
        esac

      elif [ "${RECORD[3]}" == 'option' ]; then
        exec 3>&1
        DEFAULT=`_set $KEY`
        TITLE="Change setting - $KEY"
        CAPTION="${RECORD[2]}? Please select:"
        INPUT=`enum_to_radiolist "${RECORD[4]}" 2>&1 1>&3`
        exec 3>&-
        
        _set "$KEY" "$INPUT"

      fi
    done

  done
}

################################### COMMANDS ###################################
##### Show version information
function version {
  echo $PROGRAM_NAME
  echo "Version $PROGRAM_VERSION"
  echo "© 2018 Mateusz Karcz. All rights reserved."
  echo "Licensed under the MIT License."
}

##### Show usage help
function help {
  echo "Program help"
}

##### Update base packages list or change repository
function update {
  # $1 (optional) - alternative remote repository URL
  check_wget

  if [ "$1" ]; then
    REPO_URL="$1"
    echo -n "$1" > "${REPO_LOCAL}remote"
  fi

  FILE="${REPO_LOCAL}bases.csv"
  URL="${REPO_URL}bases.csv"

  mkdir -p `dirname "$FILE"`

  if [ $IOPT_DIALOG == false ]; then

    if update_needed; then
      echo "Updating the repository..."
      http_download 2>&1
      if [ -f "$FILE" ]; then
        echo "Repository update completed."
      else
        echo "Cannot update repository!" >&2
        exit 1
      fi

    else
      echo "Repository already up to date."
    fi

  else

    if update_needed; then
      TITLE="Repository update" download_gauge
      if [ -f "$FILE" ]; then
        simple_msgbox "Repository update" "Repository update completed."
      else
        simple_msgbox "Repository update" "Cannot update repository!"
        exit 1
      fi

    else
      simple_msgbox "Repository update" "Repository already up to date."
    fi


  fi

  
}

##### Show available base packages
function bases {
  FILE="${REPO_LOCAL}bases.csv"

  if [ ! -f "$FILE" ]; then update; fi

  print_package_list
}

##### Show or select base package for the project
function base {
  if [ -z "$1" -o \( "${1:0:1}" == '-' \) ]; then

    if [ -f ".osprep/base" ]; then
      cat ".osprep/base"
      echo ''
    else
      echo "<none>"
    fi

  else

    FILE="${REPO_LOCAL}bases.csv"

    if [ ! -f "$FILE" ]; then
      echo "No repository! Update first." >&2
      exit 1
    fi

    mkdir -p '.osprep'
    find_package $1
    if [ "$FOUND" ]; then
      echo -n "$FOUND" > ".osprep/base"
      echo "Successfully selected \`$FOUND\` as the base package."
    else
      echo "Cannot find base package: \`$1\`!" >&2
      exit 1
    fi

  fi
}

##### Show packages available for the selected base
function packages {
  BASE=`base`
  if [ "$BASE" == "<none>" ]; then
    echo "Select base package first!" >&2
    exit 1
  fi

  CSV_PATH="`rdn_to_path "$BASE"`.csv"

  URL="${REPO_URL}${CSV_PATH}"
  FILE="${REPO_LOCAL}${CSV_PATH}"

  mkdir -p `dirname "$FILE"`

  if [ -f "$FILE" -a \( $OPT_LOCAL == false \) ]; then
    check_wget
    HTTP_LAST_MODIFIED=`http_header "Last-Modified"`
    if [ $(date -d "$HTTP_LAST_MODIFIED" +%s) -gt $(stat -c %Y "$FILE") ]; then
      rm "$FILE"
      echo "New package list in the remote repository." >&2
    fi
  fi

  if [ ! -f "$FILE" -a \( $OPT_LOCAL == true \) ]; then
    echo "No package list in the local repository!" >&2
    exit 1
  fi

  if [ ! -f "$FILE" ]; then
    check_wget
    echo "Fetching the package list..." >&2
    http_download
    if [ -f "$FILE" ]; then
      echo "Package list update completed." >&2
    else
      echo "Cannot update the package list!" >&2
      exit 1
    fi
  fi

  print_package_list
}

##### Add package into the project
function add {
  BASE=`base`
  if [ "$BASE" == "<none>" ]; then
    echo "Select base package first!" >&2
    exit 1
  fi

  CSV_PATH="`rdn_to_path "$BASE"`.csv"
  FILE="${REPO_LOCAL}${CSV_PATH}"

  if [ ! -f "$FILE" ]; then
    echo "Cannot read the package list! Run \`osprep packages\` first." >&2
    exit 1
  fi

  find_package $1
  if [ "$FOUND" ]; then
    touch ".osprep/packages"
    if [ `grep "^$FOUND" < ".osprep/packages"` ]; then
      echo "Package \`$FOUND\` has been selected before."
      exit 0
    fi

    echo "$FOUND" >> ".osprep/packages"
    echo "Successfully added \`$FOUND\` package to the project."
  else
    echo "Cannot find package: \`$1\`!" >&2
    exit 1
  fi
}

##### Remove package from the project
function remove {
  FILE=".osprep/packages"
  FOUND=`grep -E "^$1(~.*)?$" < "$FILE"`

  if [ "$FOUND" ]; then
    TMP=`mktemp`
    grep -v -E "^$1(~.*)?$" < "$FILE" > "$TMP"
    rm "$FILE"
    mv "$TMP" "$FILE"

    if [ "$FORMAT" == 'csv' ]; then
      read -r -a LIST <<< "$FOUND";
      i=0
      while [ "${LIST[$i]}" ]; do echo "${LIST[$i]}"; done

    else
      echo -n "Successfully removed from the project the following packages: "
      echo $FOUND
    fi

  else
    echo "Cannot find any packages matching \`$1\` in the project!" >&2
    exit 1
  fi
}

##### Show installed packages
function list {
  BASE=`base`
  if [ "$BASE" == "<none>" ]; then
    echo "Select base package first!" >&2
    exit 1
  fi

  CSV_PATH="`rdn_to_path "$BASE"`.csv"
  FILE="${REPO_LOCAL}${CSV_PATH}"

  if [ ! -f "$FILE" ]; then
    echo "Cannot read the package list! Run \`osprep packages\` first." >&2
    exit 1
  fi

  TMP=`mktemp`
  touch ".osprep/packages"
  while read LINE; do
    IFS='~' read -r -a SPLIT <<< "$LINE"
    grep -E "^${SPLIT[0]};${SPLIT[1]};" "$FILE" >> "$TMP"
  done < ".osprep/packages"

  FILE="$TMP"
  print_package_list
  rm "$TMP"
}

##### Download and extract build packages
function snap {
  check_wget

  BASE=`base`
  if [ "$BASE" == "<none>" ]; then
    echo "Select base package first!" >&2
    exit 1
  fi

  GENERAL_PATH=`rdn_to_path "$BASE"`
  PKG_PATH="${GENERAL_PATH}.txz"
  CFG_PATH=".osprep/settings/${GENERAL_PATH}.mk"
  FILE="${REPO_LOCAL}${PKG_PATH}"
  URL="${REPO_URL}${PKG_PATH}"
  TARGET_DIR="${REPO_LOCAL}${GENERAL_PATH}"

  CAPTION="Fetching base package \`$BASE\`... "
  download_package
  extract_package
  mkdir -p `dirname "$CFG_PATH"`
  cp "${TARGET_DIR}/settings.mk" "$CFG_PATH"

  touch ".osprep/packages"
  while read LINE; do
    GENERAL_PATH=`rdn_to_path "$LINE"`
    PKG_PATH="${GENERAL_PATH}.txz"
    CFG_PATH=".osprep/settings/${GENERAL_PATH}.mk"
    FILE="${REPO_LOCAL}${PKG_PATH}"
    URL="${REPO_URL}${PKG_PATH}"
    TARGET_DIR="${REPO_LOCAL}${GENERAL_PATH}" 

    CAPTION="Fetching package \`$LINE\`... "
    download_package
    extract_package
    mkdir -p `dirname "$CFG_PATH"`
    cp "${TARGET_DIR}/settings.mk" "$CFG_PATH"
  done < ".osprep/packages"
}

##### Show or modify configuration values
function _set {
  # $1 (optional) - key to get/set
  # $2 (optional) - new value

  # See all settings
  if [ -z $1 ]; then
    find ".osprep/settings" -name "*.mk" | while read FILE; do
      if [ $OPT_FORMAT == 'csv' ]; then mk_to_csv;
      else mk_to_csv | beautify_settings; fi
    done

  # Access settings for one package
  elif [ `echo "$1" | grep -P '^[a-z0-9]+(\.[a-z0-9]+)*~[a-z0-9]+(\.[a-z0-9]+)*(::[a-z0-9]+)?$'` ]; then
  
    # Get values
    if [ -z $2 ]; then
      # We've found Paamayim Nekudotayim, so the user wants just one value
      if [ `echo "$1" | grep '::'` ]; then
        PACKAGE=`echo "$1" | sed 's/::.*//'`
        FILE=".osprep/settings/`rdn_to_path "$PACKAGE"`.mk"
        mk_to_csv | grep "^$1;" | cut -d ';' -f 2

      # No Paamayim Nekudotayim, so the user wants EVERYTHING
      else
        FILE=".osprep/settings/`rdn_to_path "$1"`.mk"
        if [ $OPT_FORMAT == 'csv' ]; then mk_to_csv;
        else mk_to_csv | beautify_settings; fi
      fi

    # The user wants to modify a value
    elif [ `echo "$1" | grep '::'` ]; then
      PACKAGE=`echo "$1" | sed 's/::.*//'`
      FILE=".osprep/settings/`rdn_to_path "$PACKAGE"`.mk"
      if [ ! -f "$FILE" ]; then
        echo "Cannot set value for package \`$PACKAGE\`! Package not found." >&2
        exit 1
      fi

      LINE=`mk_to_csv | grep "^$1;"`
      if [ -z "$LINE" ]; then
        echo "Cannot set value for \`$1\`! Key not found." >&2
        exit 1
      fi

      IFS=';' read -r -a RECORD <<< "$LINE"
      if [ ${RECORD[3]} == 'check' ]; then
        if [ "$2" != '0' -a "$2" != '1' ]; then
          echo "Cannot set value for \`$1\`! \`$2\` is not BOOL."
          exit 1
        fi

      elif [ ${RECORD[3]} == 'option' ]; then
        IFS=',' read -r -a ENUMS <<< "${RECORD[4]}"
        FOUND=0
        i=0
        while [ "${ENUMS[$i]}" ]; do
          if [ "${ENUMS[$i]}" == "$2" ]; then
            FOUND=1
            break
          fi
          let i++
        done
        if [ $FOUND -eq 0 ]; then  
          echo "Cannot set value for \`$1\`! \`$2\` doesn't fit ENUM."
          exit 1
        fi

      elif [ ${RECORD[3]} != 'text' ]; then
        echo "Unknown setting value type \`${RECORD[3]}\`!" >&2
        exit 1
      fi

      RECORD[1]="$2"
      LINE=`record_to_mk`
      KEY=`echo "${RECORD[0]}" | sed -e 's/.*:://'`
      sed -i "/^$KEY\\s*=/c\\$LINE" "$FILE"

      _set "$1"

    # No Paamayim Nekudotayim means a mistake here...
    else
      echo "Cannot change value of a package!" >&2
      exit 1

    fi

  # The user screwed up
  else
    echo "\`$1\` is not a valid key or package name!" >&2
    exit 1

  fi
}

##### Apply project configuration (prepare target)
function apply {
  check_make

  BASE=`base`
  if [ "$BASE" == "<none>" ]; then
    echo "Select base package first!" >&2
    exit 1
  fi
  TARGET="target"
  if [ "$1" ]; then TARGET="$1"; fi
  rm -rf "$TARGET"
  mkdir -p "$TARGET"

  MAKEDIR=".osprep/make"
  rm -rf "$MAKEDIR"
  mkdir -p "$MAKEDIR"

  touch ".osprep/packages"
  while read LINE; do prepare_apply "$LINE"; done < ".osprep/packages"

  echo -e "Processing packages..."
  find `realpath "$MAKEDIR"` -type d | grep -E '~[^/]+$' | while read LINE; do
    make -C "$LINE" apply
    if [ $? -ne 0 ]; then exit 1; fi
  done

  echo -e "\nProcessing base package..."
  prepare_apply "$BASE"
  make -C "${MAKEDIR}/`rdn_to_path "$BASE"`" apply
}

##### Delete all settings and package choices
function discard {
  rm -f ".osprep/packages"
  rm -rf ".osprep/settings"
  rm -rf ".osprep/make"
}

##### Create image file
function image {
  MAKEDIR=".osprep/make"
  BASE=`base`
  IMAGE=`realpath $1` make -C "${MAKEDIR}/`rdn_to_path "$BASE"`" image
  return
}

##### Open interactive dialog-based UI
function interactive {
  check_dialog

  tput smcup

  ITEM=1
  while true; do
    exec 3>&1
    if [ `base` != '<none>' -a -f "$HOME/.osprep/bases.csv" ]; then
      if [ -d '.osprep/make' ]; then
        ITEM=`dialog \
          --backtitle "$PROGRAM_NAME" \
          --title Menu \
          --clear \
          --default-item $ITEM \
          --cancel-label Exit \
          --extra-button --extra-label About \
          --menu "Please select:" 0 0 10 \
          1 "Update base packages list" \
          2 "Change remote repository address" \
          3 "Select base package" \
          4 "Select packages" \
          5 "Snap packages" \
          6 "Change settings" \
          7 "Apply changes" \
          8 "Discard changes" \
          9 "Create image" 2>&1 1>&3`
      elif [ -d '.osprep/settings' ]; then
        ITEM=`dialog \
          --backtitle "$PROGRAM_NAME" \
          --title Menu \
          --clear \
          --default-item $ITEM \
          --cancel-label Exit \
          --extra-button --extra-label About \
          --menu "Please select:" 0 0 10 \
          1 "Update base packages list" \
          2 "Change remote repository address" \
          3 "Select base package" \
          4 "Select packages" \
          5 "Snap packages" \
          6 "Change settings" \
          7 "Apply changes" \
          8 "Discard changes" 2>&1 1>&3`
      else
        ITEM=`dialog \
          --backtitle "$PROGRAM_NAME" \
          --title Menu \
          --clear \
          --default-item $ITEM \
          --cancel-label Exit \
          --extra-button --extra-label About \
          --menu "Please select:" 0 0 10 \
          1 "Update base packages list" \
          2 "Change remote repository address" \
          3 "Select base package" \
          4 "Select packages" \
          5 "Snap packages"  2>&1 1>&3`
      fi
    else
      ITEM=`dialog \
        --backtitle "$PROGRAM_NAME" \
        --title Menu \
        --clear \
        --default-item $ITEM \
        --cancel-label Exit \
        --extra-button --extra-label About \
        --menu "Please select:" 0 0 10 \
        1 "Update base packages list" \
        2 "Change remote repository address" \
        3 "Select base package" 2>&1 1>&3`
    fi
    RVAL=$?
    exec 3>&-

    case $RVAL in
      $DIALOG_CANCEL ) break  ;;
      $DIALOG_ESC    ) exit 1 ;;
      $DIALOG_EXTRA  )
        version | dialog \
        --backtitle "$PROGRAM_NAME" \
        --programbox 8 60
        ;;
    esac

    if [ $RVAL -ne $DIALOG_OK ]; then continue; fi

    case $ITEM in
      0) # Exit
        break;;

      1) # Update base packages list
        IOPT_DIALOG=true update;;

      2) # Change remote repository address
        exec 3>&1
        INPUT=`dialog \
          --backtitle "$PROGRAM_NAME" \
          --title "Change remote repository" \
          --inputbox "Type in a new remote repository URL:" 10 60 "$REPO_URL" \
          2>&1 1>&3`
        RVAL=$?
        exec 3>&-

        case $RVAL in
          $DIALOG_CANCEL ) continue ;;
          $DIALOG_ESC    ) exit 1   ;;
        esac

        IOPT_DIALOG=true update "$INPUT"
        ;;

      3) # Select base package
        TITLE='Base package selection'
        CAPTION='Please select base package:'
        exec 3>&1
        NEWBASE=`IOPT_DIALOG=true OPT_FORMAT=csv bases \
        | sed -e 's/;/~/' | sed -e 's/"/\\\\"/g' \
        | csv_to_menu 2>&1 1>&3`
        exec 3>&-
        if [ $NEWBASE ]; then
          OUTPUT=`base $NEWBASE 2>&1`
          dialog --msgbox "$OUTPUT" 10 60
        fi
        ;;

      4) # Select packages
        TITLE='Package selection'
        CAPTION='Please select desired packages:'
        exec 3>&1
        SELECTIONS=`mark_common_packages \
        | sed -e 's/;/~/' | sed -e 's/"/\\\\"/g' \
        | csv_to_menu 'checklist' 2>&1 1>&3`
        exec 3>&-

        if [ "$SELECTIONS" ]; then
          rm -f '.osprep/packages'

          read -r -a ITEMS <<< "$SELECTIONS"
          for i in "${ITEMS[@]}"; do
            echo "$i" >> '.osprep/packages'
          done
        fi
        ;;

      5) # Snap packages
        IOPT_DIALOG=true snap
        ;;

      6) # Change settings
        settings_menu
        ;;

      7) # Apply changes
        apply
        ;;

      8) # Discard changes
        discard
        ;;

      9) # Create image
        exec 3>&1
        INPUT=`dialog \
          --backtitle "$PROGRAM_NAME" \
          --title "Create operating system image" \
          --inputbox "Type image filename:" 10 60 \
          2>&1 1>&3`
        RVAL=$?
        exec 3>&-

        case $RVAL in
          $DIALOG_CANCEL ) continue ;;
          $DIALOG_ESC    ) exit 1   ;;
        esac

        IOPT_DIALOG=true image "$INPUT"
        ;;
    esac
  done

  tput rmcup

}

######################### SCRIPT ARGUMENTS PROCESSING ##########################
if [ -f "${REPO_LOCAL}remote" ]; then REPO_URL=`cat ${REPO_LOCAL}remote`; fi
if [ -z $IOPT_DIALOG ]; then IOPT_DIALOG=false; fi

POSITIONAL=()
while [ $# -gt 0 ]; do
  i="$1"

  case $i in

    --local|-l )
      OPT_LOCAL=true
      shift
      ;;

    --format=* )
      OPT_FORMAT=${i#*=}
      shift
      ;;

    *)
      POSITIONAL+=("$1")
      shift
      ;;

  esac
done
set -- "${POSITIONAL[@]}"

case $1 in

  '' ) interactive ;;

  --version|-v   ) version     ;;
  --help|-h|help ) help        ;;

  update   ) update   "$2";;
  bases    ) bases    "$2";;
  base     ) base     "$2";;
  packages ) packages "$2";;
  add      ) add      "$2";;
  remove   ) remove   "$2";;
  list     ) list     "$2";;
  snap     ) snap     "$2";;
  set      ) _set     "$2" "$3";;
  apply    ) apply    "$2";;
  discard  ) discard  "$2";;
  image    ) image    "$2";;

  *)
    echo "\`$1\` is not a valid OS Preparation Utility command!" >&2
    exit 1

esac
